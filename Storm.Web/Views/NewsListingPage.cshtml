@using Storm.Core.ViewComponents;
@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<ContentModels.NewsListingPage>
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@inject Umbraco.Cms.Core.IPublishedContentQuery publishedContentQuery
@{
    Layout = "Layout.cshtml";
    var hasPageHeading = (Model is IUmbBlockGridDemoHeadlineBlock);
    var pageColSize = Model.PageWidth;
    var isSearch = Context.Request.QueryString.HasValue;
    var pageNumber = (!string.IsNullOrWhiteSpace(Context.Request.Query["page"])) ? Convert.ToInt32(Context.Request.Query["page"]) : 0;
    var searchQuery = Context.Request.Query["query"];
    IEnumerable<NewsArticle> results = null;

    if (isSearch && !string.IsNullOrWhiteSpace(searchQuery))
    {
        //I could've created a custom Examine index for this, but I'm reluctant to do that (let's discuss why)
        results = publishedContentQuery.Search(searchQuery).Where(x => x.Content.ContentType.Alias == "newsArticle").Skip(pageNumber).Take(10).Select(x => x.Content as NewsArticle);
    }
    else
    {
        results = Model.Children<NewsArticle>().Where(x => x.IsVisible()).Skip(pageNumber).Take(10);
    }
}



<div class="@(pageColSize)u skel-cell-mainContent">
    <div class="content">

        

        <!-- Content -->
        <article class="is-page-content">
            
            <section class="search">
                <form action="@Model.Url()" method="Get">
                    <fieldset>
                        <input type="text" class="search-box" placeholder="Search..." name="query" />
                        <input type="text" value="@pageNumber" hidden name="page" />
                        <button class="search-button">Search</button>
                    </fieldset>
                </form>
            </section>

            @if (hasPageHeading)
            {
                <header>
                    @switch (Model.HeadlineStyle)
                    {
                        case "H1":
                            <h1>@Model.Headline</h1>
                            break;
                        case "H2":
                            <h2>@Model.Headline</h2>
                            break;
                        case "H3":
                            <h3>@Model.Headline</h3>
                            break;
                        case "H4":
                            <h4>@Model.Headline</h4>
                            break;
                        case "H5":
                            <h5>@Model.Headline</h5>
                            break;
                        default:
                            <h2>@Model.Headline</h2>
                            break;
                    }
                </header>
            }

            @if (results.Any())
            {
                foreach (var newsItem in results)
                {
                    @await Component.InvokeAsync(nameof(NewsItemSummary), newsItem)
                }
            }
            else
            {
                <p>No results found matching your query</p>
            }

        </article>
        <!-- /Content -->
    </div>
</div>